{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","utils/fetchClient.ts","api/comments.ts","components/PostDetails.tsx","components/UsersContext.tsx","api/users.ts","components/UserSelector.tsx","App.tsx","api/posts.ts","index.tsx"],"names":["PostsList","posts","selectedPostId","onPostSelected","className","map","post","id","title","type","classNames","onClick","Loader","NewCommentForm","onSubmit","useState","submitting","setSubmitting","name","email","body","errors","setErrors","setValues","handleChange","event","target","field","value","current","handleSubmit","preventDefault","onReset","htmlFor","placeholder","onChange","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","JSON","stringify","headers","then","fetch","response","json","client","deleteComment","commentId","PostDetails","comments","setComments","loaded","setLoaded","hasError","setError","visible","setVisible","useEffect","postId","catch","finally","addComment","a","newComment","currentComments","filter","comment","commentsApi","length","href","UserContext","React","createContext","UsersProvider","children","users","setUsers","Provider","UserSelector","selectedUser","useContext","expanded","setExpanded","handleDocumentClick","document","addEventListener","removeEventListener","role","user","App","setPosts","author","setAuthor","selectedPost","setSelectedPost","loadUserPosts","userId","getUserPosts","Root","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.da89eabd.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[],\n  selectedPostId?: number,\n  onPostSelected: (post: Post | null) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPostId = 0,\n  onPostSelected,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts.map(post => (\n          <tr key={post.id} data-cy=\"Post\">\n            <td data-cy=\"PostId\">{post.id}</td>\n            <td data-cy=\"PostTitle\">{post.title}</td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                type=\"button\"\n                data-cy=\"PostButton\"\n                className={classNames(\n                  'button',\n                  'is-link',\n                  {\n                    'is-light': post.id !== selectedPostId,\n                  },\n                )}\n                onClick={() => {\n                  onPostSelected(post.id === selectedPostId ? null : post);\n                }}\n              >\n                {post.id === selectedPostId ? 'Close' : 'Open'}\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { CommentData } from '../types/Comment';\n\ntype Props = {\n  onSubmit: (data: CommentData) => Promise<void>;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ onSubmit }) => {\n  const [submitting, setSubmitting] = useState(false);\n\n  const [errors, setErrors] = useState({\n    name: false,\n    email: false,\n    body: false,\n  });\n\n  const [{ name, email, body }, setValues] = useState({\n    name: '',\n    email: '',\n    body: '',\n  });\n\n  const clearForm = () => {\n    setValues({\n      name: '',\n      email: '',\n      body: '',\n    });\n\n    setErrors({\n      name: false,\n      email: false,\n      body: false,\n    });\n  };\n\n  const handleChange = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    const { name: field, value } = event.target;\n\n    setValues(current => ({ ...current, [field]: value }));\n    setErrors(current => ({ ...current, [field]: false }));\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setErrors({\n      name: !name,\n      email: !email,\n      body: !body,\n    });\n\n    if (!name || !email || !body) {\n      return;\n    }\n\n    setSubmitting(true);\n\n    await onSubmit({ name, email, body });\n\n    setSubmitting(false);\n    setValues(current => ({ ...current, body: '' }));\n  };\n\n  return (\n    <form onSubmit={handleSubmit} onReset={clearForm} data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': errors.name })}\n            value={name}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {errors.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errors.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': errors.email })}\n            value={email}\n            onChange={handleChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {errors.email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errors.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', { 'is-danger': errors.body })}\n            value={body}\n            onChange={handleChange}\n          />\n        </div>\n\n        {errors.body && (\n          <p\n            className=\"help is-danger\"\n            data-cy=\"ErrorMessage\"\n          >\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button', 'is-link', {\n              'is-loading': submitting,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button type=\"reset\" className=\"button is-link is-light\">\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { client } from '../utils/fetchClient';\nimport { Comment } from '../types/Comment';\n\nexport const getPostComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const createComment = (data: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\nimport * as commentsApi from '../api/comments';\n\nimport { Post } from '../types/Post';\nimport { Comment, CommentData } from '../types/Comment';\n\ntype Props = {\n  post: Post;\n};\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [loaded, setLoaded] = useState(false);\n  const [hasError, setError] = useState(false);\n  const [visible, setVisible] = useState(false);\n\n  function loadComments() {\n    setLoaded(false);\n    setError(false);\n    setVisible(false);\n\n    commentsApi.getPostComments(post.id)\n      .then(setComments)\n      .catch(() => setError(true))\n      .finally(() => setLoaded(true));\n  }\n\n  useEffect(loadComments, [post.id]);\n\n  const addComment = async ({ name, email, body }: CommentData) => {\n    try {\n      const newComment = await commentsApi.createComment({\n        name,\n        email,\n        body,\n        postId: post.id,\n      });\n\n      setComments(\n        currentComments => [...currentComments, newComment],\n      );\n    } catch (error) {\n      setError(true);\n    }\n  };\n\n  const deleteComment = async (commentId: number) => {\n    setComments(\n      currentComments => currentComments.filter(\n        comment => comment.id !== commentId,\n      ),\n    );\n\n    await commentsApi.deleteComment(commentId);\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"block\">\n        <h2 data-cy=\"PostTitle\">\n          {`#${post.id}: ${post.title}`}\n        </h2>\n\n        <p data-cy=\"PostBody\">\n          {post.body}\n        </p>\n      </div>\n\n      <div className=\"block\">\n        {!loaded && (\n          <Loader />\n        )}\n\n        {loaded && hasError && (\n          <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n            Something went wrong\n          </div>\n        )}\n\n        {loaded && !hasError && comments.length === 0 && (\n          <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n            No comments yet\n          </p>\n        )}\n\n        {loaded && !hasError && comments.length > 0 && (\n          <>\n            <p className=\"title is-4\">Comments:</p>\n\n            {comments.map(comment => (\n              <article\n                className=\"message is-small\"\n                key={comment.id}\n                data-cy=\"Comment\"\n              >\n                <div className=\"message-header\">\n                  <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                    {comment.name}\n                  </a>\n\n                  <button\n                    data-cy=\"CommentDelete\"\n                    type=\"button\"\n                    className=\"delete is-small\"\n                    aria-label=\"delete\"\n                    onClick={() => deleteComment(comment.id)}\n                  >\n                    delete button\n                  </button>\n                </div>\n\n                <div className=\"message-body\" data-cy=\"CommentBody\">\n                  {comment.body}\n                </div>\n              </article>\n            ))}\n          </>\n        )}\n\n        {loaded && !hasError && !visible && (\n          <button\n            data-cy=\"WriteCommentButton\"\n            type=\"button\"\n            className=\"button is-link\"\n            onClick={() => setVisible(true)}\n          >\n            Write a comment\n          </button>\n        )}\n\n        {loaded && !hasError && visible && (\n          <NewCommentForm onSubmit={addComment} />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { getUsers } from '../api/users';\nimport { User } from '../types/User';\n\nexport const UserContext = React.createContext<User[]>([]);\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const UsersProvider: React.FC<Props> = ({ children }) => {\n  const [users, setUsers] = useState<User[]>([]);\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers);\n  }, []);\n\n  return (\n    <UserContext.Provider value={users}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { User } from '../types/User';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { UserContext } from './UsersContext';\nimport { User } from '../types/User';\n\ntype Props = {\n  value: User | null;\n  onChange: (user: User) => void;\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  value: selectedUser,\n  onChange,\n}) => {\n  const users = useContext(UserContext);\n  const [expanded, setExpanded] = useState(false);\n\n  useEffect(() => {\n    if (!expanded) {\n      return;\n    }\n\n    const handleDocumentClick = () => {\n      setExpanded(false);\n    };\n\n    document.addEventListener('click', handleDocumentClick);\n\n    // eslint-disable-next-line consistent-return\n    return () => {\n      document.removeEventListener('click', handleDocumentClick);\n    };\n  }, [expanded]);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', { 'is-active': expanded })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => {\n            setExpanded(current => !current);\n          }}\n        >\n          <span>\n            {selectedUser?.name || 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              onClick={() => {\n                onChange(user);\n              }}\n              className={classNames('dropdown-item', {\n                'is-active': user.id === selectedUser?.id,\n              })}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { getUserPosts } from './api/posts';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [loaded, setLoaded] = useState(false);\n  const [hasError, setError] = useState(false);\n\n  const [author, setAuthor] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  function loadUserPosts(userId: number) {\n    setLoaded(false);\n\n    getUserPosts(userId)\n      .then(setPosts)\n      .catch(() => setError(true))\n      .finally(() => setLoaded(true));\n  }\n\n  useEffect(() => {\n    setSelectedPost(null);\n\n    if (author) {\n      loadUserPosts(author.id);\n    } else {\n      setPosts([]);\n    }\n  }, [author?.id]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector value={author} onChange={setAuthor} />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!author && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {author && !loaded && (\n                  <Loader />\n                )}\n\n                {author && loaded && hasError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {author && loaded && !hasError && posts.length === 0 && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {author && loaded && !hasError && posts.length > 0 && (\n                  <PostsList\n                    posts={posts}\n                    selectedPostId={selectedPost?.id}\n                    onPostSelected={setSelectedPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              {\n                'Sidebar--open': selectedPost,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails post={selectedPost} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { client } from '../utils/fetchClient';\nimport { Post } from '../types/Post';\n\nexport const getUserPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { App } from './App';\nimport { UsersProvider } from './components/UsersContext';\n\nconst Root = () => (\n  <UsersProvider>\n    <Router>\n      <App />\n    </Router>\n  </UsersProvider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}